Index: pyrad-2.0/pyrad/client.py
===================================================================
--- pyrad-2.0.orig/pyrad/client.py
+++ pyrad-2.0/pyrad/client.py
@@ -51,6 +51,7 @@ class Client(host.Host):
         self._socket = None
         self.retries = 3
         self.timeout = 5
+        self._poll = select.poll()
 
     def bind(self, addr):
         """Bind socket to an address.
@@ -70,9 +71,11 @@ class Client(host.Host):
                                        socket.SOCK_DGRAM)
             self._socket.setsockopt(socket.SOL_SOCKET,
                                     socket.SO_REUSEADDR, 1)
+            self._poll.register(self._socket, select.POLLIN)
 
     def _CloseSocket(self):
         if self._socket:
+            self._poll.unregister(self._socket)
             self._socket.close()
             self._socket = None
 
@@ -126,10 +129,9 @@ class Client(host.Host):
             waitto = now + self.timeout
 
             while now < waitto:
-                ready = select.select([self._socket], [], [],
-                                    (waitto - now))
+                ready = self._poll.poll((waitto - now) * 1000)
 
-                if ready[0]:
+                if ready:
                     rawreply = self._socket.recv(4096)
                 else:
                     now = time.time()
Index: pyrad-2.0/pyrad/tests/mock.py
===================================================================
--- pyrad-2.0.orig/pyrad/tests/mock.py
+++ pyrad-2.0/pyrad/tests/mock.py
@@ -75,16 +75,22 @@ class MockFinished(Exception):
     pass
 
 
-class MockPoll:
+class MockPoll(object):
     results = []
 
     def __init__(self):
-        self.registry = []
+        self.registry = {}
 
     def register(self, fd, options):
-        self.registry.append((fd, options))
+        self.registry[fd] = options
 
-    def poll(self):
+    def unregister(self, fd):
+        try:
+            del self.registry[fd]
+        except KeyError:
+            pass
+
+    def poll(self, timeout=None):
         for result in self.results:
             yield result
         raise MockFinished
Index: pyrad-2.0/pyrad/tests/testClient.py
===================================================================
--- pyrad-2.0.orig/pyrad/tests/testClient.py
+++ pyrad-2.0/pyrad/tests/testClient.py
@@ -1,3 +1,4 @@
+import select
 import socket
 import unittest
 import six
@@ -8,6 +9,7 @@ from pyrad.packet import AcctPacket
 from pyrad.packet import AccessRequest
 from pyrad.packet import AccountingRequest
 from pyrad.tests.mock import MockPacket
+from pyrad.tests.mock import MockPoll
 from pyrad.tests.mock import MockSocket
 
 BIND_IP = "127.0.0.1"
@@ -55,6 +57,7 @@ class SocketTests(unittest.TestCase):
         self.orgsocket = socket.socket
         socket.socket = MockSocket
 
+
     def tearDown(self):
         socket.socket = self.orgsocket
 
@@ -73,6 +76,7 @@ class SocketTests(unittest.TestCase):
     def testBindClosesSocket(self):
         s = MockSocket(socket.AF_INET, socket.SOCK_DGRAM)
         self.client._socket = s
+        self.client._poll = MockPoll()
         self.client.bind((BIND_IP, BIND_PORT))
         self.assertEqual(s.closed, True)
 
@@ -145,6 +149,8 @@ class SocketTests(unittest.TestCase):
         self.client.retries = 1
         self.client.timeout = 1
         self.client._socket = MockSocket(1, 2, six.b("valid reply"))
+        self.client._poll = MockPoll()
+        MockPoll.results = [(1, select.POLLIN)]
         packet = MockPacket(AccountingRequest, verify=True)
         reply = self.client._SendPacket(packet, 432)
         self.failUnless(reply is packet.reply)
@@ -153,6 +159,7 @@ class SocketTests(unittest.TestCase):
         self.client.retries = 1
         self.client.timeout = 1
         self.client._socket = MockSocket(1, 2, six.b("invalid reply"))
+        MockPoll.results = [(1, select.POLLIN)]
         packet = MockPacket(AccountingRequest, verify=False)
         self.assertRaises(Timeout, self.client._SendPacket, packet, 432)
 
Index: pyrad-2.0/pyrad/tests/testProxy.py
===================================================================
--- pyrad-2.0.orig/pyrad/tests/testProxy.py
+++ pyrad-2.0/pyrad/tests/testProxy.py
@@ -33,7 +33,7 @@ class SocketTests(unittest.TestCase):
         self.failUnless(isinstance(self.proxy._proxyfd, MockSocket))
         self.assertEqual(list(self.proxy._fdmap.keys()), [1])
         self.assertEqual(self.proxy._poll.registry,
-                [(1, select.POLLIN | select.POLLPRI | select.POLLERR)])
+                {1: select.POLLIN | select.POLLPRI | select.POLLERR})
 
 
 class ProxyPacketHandlingTests(unittest.TestCase):
Index: pyrad-2.0/pyrad/tests/testServer.py
===================================================================
--- pyrad-2.0.orig/pyrad/tests/testServer.py
+++ pyrad-2.0/pyrad/tests/testServer.py
@@ -106,7 +106,7 @@ class SocketTests(unittest.TestCase):
         self.server._poll = MockPoll()
         self.server._PrepareSockets()
 
-        self.assertEqual(self.server._poll.registry, [])
+        self.assertEqual(self.server._poll.registry, {})
         self.assertEqual(self.server._realauthfds, [])
         self.assertEqual(self.server._realacctfds, [])
 
@@ -118,8 +118,8 @@ class SocketTests(unittest.TestCase):
 
         self.assertEqual(list(self.server._fdmap.keys()), [12, 14])
         self.assertEqual(self.server._poll.registry,
-                [(12, select.POLLIN | select.POLLPRI | select.POLLERR),
-                 (14, select.POLLIN | select.POLLPRI | select.POLLERR)])
+                {12: select.POLLIN | select.POLLPRI | select.POLLERR,
+                 14: select.POLLIN | select.POLLPRI | select.POLLERR})
 
     def testPrepareSocketAcctFds(self):
         self.server._poll = MockPoll()
@@ -129,8 +129,8 @@ class SocketTests(unittest.TestCase):
 
         self.assertEqual(list(self.server._fdmap.keys()), [12, 14])
         self.assertEqual(self.server._poll.registry,
-                [(12, select.POLLIN | select.POLLPRI | select.POLLERR),
-                 (14, select.POLLIN | select.POLLPRI | select.POLLERR)])
+                {12: select.POLLIN | select.POLLPRI | select.POLLERR,
+                 14: select.POLLIN | select.POLLPRI | select.POLLERR})
 
 
 class AuthPacketHandlingTests(unittest.TestCase):
